/* automatically generated by rust-bindgen 0.55.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct word_info {
    pub word: *const ::std::os::raw::c_char,
    pub validity: bool,
}
#[test]
fn bindgen_test_layout_word_info() {
    assert_eq!(
        ::std::mem::size_of::<word_info>(),
        16usize,
        concat!("Size of: ", stringify!(word_info))
    );
    assert_eq!(
        ::std::mem::align_of::<word_info>(),
        8usize,
        concat!("Alignment of ", stringify!(word_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word_info>())).word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(word_info),
            "::",
            stringify!(word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word_info>())).validity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(word_info),
            "::",
            stringify!(validity)
        )
    );
}
pub type word_info_t = word_info;
extern "C" {
    pub fn get_word(w_info: *const word_info_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_validity(w_info: *const word_info_t) -> bool;
}
